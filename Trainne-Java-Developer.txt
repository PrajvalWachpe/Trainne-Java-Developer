Q1: Merge two arrays by satisfying given constraints
Given two sorted arrays X[] and Y[] of size m and n each where m >= n and X[] has exactly n vacant cells,
merge elements of Y[] in their correct position in array X[], i.e., merge (X, Y) by keeping the sorted order.

For example,
Input: X[] = { 0, 2, 0, 3, 0, 5, 6, 0, 0 }
Y[] = { 1, 8, 9, 10, 15 } The vacant cells in X[] is represented by 0 
Output: X[] = { 1, 2, 3, 5, 6, 8, 9, 10, 15 }

ANS:-

package javaTrainne;
import java.util.Arrays;
public class MergeArrays {
    public static void mergeArrays(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;
        
        int k = m - 1;
        for (int i = m - 1; i >= 0; i--) {
            if (X[i] != 0) {
                X[k] = X[i];
                k--;
            }
        }
        
      
        int i = k + 1;
        int j = 0;     
        k = 0;         
        
        while (i < m && j < n) {
            if (X[i] < Y[j]) {
                X[k] = X[i];
                i++;
            } else {
                X[k] = Y[j];
                j++;
            }
            k++;
        }
        
       
        while (j < n) {
            X[k] = Y[j];
            j++;
            k++;
        }
    }
    
    public static void main(String[] args) {
        int[] X = { 0, 2, 0, 3, 0, 5, 6, 0, 0 };
        int[] Y = { 1, 8, 9, 10, 15 };
        
        mergeArrays(X, Y);
        
        System.out.println("Merged array: " + Arrays.toString(X));
    }
}


**************************************************************************************************************************
Q2:Find maximum sum path involving elements of given arrays
Given two sorted arrays of integers, find a maximum sum path involving elements of both arrays whose sum is maximum. 
We can start from either array, but we can switch between arrays only through its common elements.

For example,
Input: X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 }
Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 }  
The maximum sum path is: 1 —> 2 —> 3 —> 6 —> 7 —> 9 —> 10 —> 12 —> 15 —> 16 —> 18 —> 100 
The maximum sum is 199

ANS:-

package javaTrainne;
public class MaximumSumPath {
    public static int findMaxSumPath(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;
        
        int sumX = 0, sumY = 0, result = 0;
        int i = 0, j = 0;
        
        while (i < m && j < n) {
            if (X[i] < Y[j]) {
                sumX += X[i];
                i++;
            } else if (X[i] > Y[j]) {
                sumY += Y[j];
                j++;
            } else {
                result += Math.max(sumX, sumY) + X[i];
                sumX = 0;
                sumY = 0;
                i++;
                j++;
            }
        }
        
        
        while (i < m) {
            sumX += X[i];
            i++;
        }
        
        while (j < n) {
            sumY += Y[j];
            j++;
        }
        
        
        result += Math.max(sumX, sumY);
        
        return result;
    }
    
    public static void main(String[] args) {
        int[] X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 };
        int[] Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 };
        
        int maxSum = findMaxSumPath(X, Y);
        
        System.out.println("Maximum sum path: " + maxSum);
    }
}
******************************************************************************************************************************
Q3:Write a Java Program to count the number of words in a string using HashMap.

ANS:-

package javaTrainne;
import java.util.HashMap;
public class WordCount {
    public static void main(String[] args) {
        String inputString = "This is a sample input string to count the number of words in it.";
        
       
        inputString = inputString.trim();
        
      
        String[] words = inputString.split("\\s+");
        
     
        HashMap<String, Integer> wordCountMap = new HashMap<>();
        
        
        for (String word : words) {
            
            word = word.toLowerCase();
            
           
            if (wordCountMap.containsKey(word)) {
                wordCountMap.put(word, wordCountMap.get(word) + 1);
            } else {
                
                wordCountMap.put(word, 1);
            }
        }
        
        
        System.out.println("Word count:");
        for (String word : wordCountMap.keySet()) {
            System.out.println(word + ": " + wordCountMap.get(word));
        }
    }
}

******************************************************************************************************************************
Q4:Write a Java Program to find the duplicate characters in a string.

ANS:-


import java.util.HashMap;
import java.util.Map;

public class DuplicateCharacters {
    public static void main(String[] args) {
        String inputString = "Hello, World!";

        inputString = inputString.replaceAll("\\s+", "").toLowerCase();

        Map<Character, Integer> charCountMap = new HashMap<>();

        for (char c : inputString.toCharArray()) {
           
            if (charCountMap.containsKey(c)) {
                charCountMap.put(c, charCountMap.get(c) + 1);
            } else {
                
                charCountMap.put(c, 1);
            }
        }
        
      
        System.out.println("Duplicate characters in the string:");
        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {
            if (entry.getValue() > 1) {
                System.out.println(entry.getKey() + ": " + entry.getValue() + " occurrences");
            }
        }
    }
}

